{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validate","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","isError","htmlFor","type","classNames","event","target","onBlur","isValidUrl","url","test","NewMovie","onAdd","count","setCount","formData","setFormData","allFieldsFilled","setAllFieldsFilled","useEffect","trim","handleChange","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cb6d7b4.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validate?: (value: string) => boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  validate = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const isError = value && !validate(value);\n\n  const handleBlur = () => {\n    setTouched(true);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {isError && (\n        <p className=\"help is-danger\">{`${label} is not correct`}</p>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface NewMovieProps {\n  onAdd: (movie: Movie) => void;\n}\n\nconst isValidUrl = (url: string): boolean => {\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;// eslint-disable-line\n\n  return pattern.test(url);\n};\n\nexport const NewMovie: React.FC<NewMovieProps> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [allFieldsFilled, setAllFieldsFilled] = useState(false);\n\n  useEffect(() => {\n    setAllFieldsFilled(\n      formData.title.trim() !== ''\n      && formData.imgUrl.trim() !== ''\n      && formData.imdbUrl.trim() !== ''\n      && formData.imdbId.trim() !== '',\n    );\n  }, [formData]);\n\n  const handleChange = (name: string, value: string) => {\n    setFormData({ ...formData, [name]: value });\n\n    setAllFieldsFilled(\n      formData.title.trim() !== ''\n      && formData.imgUrl.trim() !== ''\n      && formData.imdbUrl.trim() !== ''\n      && formData.imdbId.trim() !== '',\n    );\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (allFieldsFilled) {\n      onAdd(formData);\n\n      setFormData({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n\n      setAllFieldsFilled(false);\n      setCount((prevCount) => prevCount + 1);\n    }\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formData.title}\n        onChange={(value) => handleChange('title', value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formData.description}\n        onChange={(value) => handleChange('description', value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formData.imgUrl}\n        onChange={(value) => handleChange('imgUrl', value)}\n        validate={(value) => isValidUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formData.imdbUrl}\n        onChange={(value) => handleChange('imdbUrl', value)}\n        validate={(value) => isValidUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formData.imdbId}\n        onChange={(value) => handleChange('imdbId', value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!allFieldsFilled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  // Функція для обробки додавання нових фільмів\n  const handleMovieAdd = (newMovie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleMovieAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}